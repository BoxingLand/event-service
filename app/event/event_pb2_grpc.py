# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import app.event.event_pb2 as event__pb2


class EventStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateClub = channel.unary_unary(
                '/event.Event/CreateClub',
                request_serializer=event__pb2.CreateClubRequest.SerializeToString,
                response_deserializer=event__pb2.CreateClubResponse.FromString,
                )
        self.AddCoachToClub = channel.unary_unary(
                '/event.Event/AddCoachToClub',
                request_serializer=event__pb2.AddCoachToClubRequest.SerializeToString,
                response_deserializer=event__pb2.AddCoachToClubResponse.FromString,
                )
        self.RemoveCoachToClub = channel.unary_unary(
                '/event.Event/RemoveCoachToClub',
                request_serializer=event__pb2.RemoveCoachToClubRequest.SerializeToString,
                response_deserializer=event__pb2.RemoveCoachToClubResponse.FromString,
                )
        self.UpdateClub = channel.unary_unary(
                '/event.Event/UpdateClub',
                request_serializer=event__pb2.UpdateClubRequest.SerializeToString,
                response_deserializer=event__pb2.UpdateClubResponse.FromString,
                )
        self.DeleteClub = channel.unary_unary(
                '/event.Event/DeleteClub',
                request_serializer=event__pb2.DeleteClubRequest.SerializeToString,
                response_deserializer=event__pb2.DeleteClubResponse.FromString,
                )
        self.GetClubIDByName = channel.unary_unary(
                '/event.Event/GetClubIDByName',
                request_serializer=event__pb2.GetClubIDByNameRequest.SerializeToString,
                response_deserializer=event__pb2.GetClubIDByNameResponse.FromString,
                )
        self.GetClubByName = channel.unary_unary(
                '/event.Event/GetClubByName',
                request_serializer=event__pb2.GetClubByNameRequest.SerializeToString,
                response_deserializer=event__pb2.GetClubResponse.FromString,
                )
        self.GetClubByID = channel.unary_unary(
                '/event.Event/GetClubByID',
                request_serializer=event__pb2.GetClubByIDRequest.SerializeToString,
                response_deserializer=event__pb2.GetClubResponse.FromString,
                )
        self.GetClubs = channel.unary_stream(
                '/event.Event/GetClubs',
                request_serializer=event__pb2.GetClubsRequest.SerializeToString,
                response_deserializer=event__pb2.GetClubsResponse.FromString,
                )
        self.GetClubCoachesID = channel.unary_stream(
                '/event.Event/GetClubCoachesID',
                request_serializer=event__pb2.GetClubCoachesIDRequest.SerializeToString,
                response_deserializer=event__pb2.GetClubCoachesIDResponse.FromString,
                )
        self.CreateCompetition = channel.unary_unary(
                '/event.Event/CreateCompetition',
                request_serializer=event__pb2.CreateCompetitionRequest.SerializeToString,
                response_deserializer=event__pb2.CreateCompetitionResponse.FromString,
                )
        self.AddBoxerToCompetition = channel.unary_unary(
                '/event.Event/AddBoxerToCompetition',
                request_serializer=event__pb2.AddBoxerToCompetitionRequest.SerializeToString,
                response_deserializer=event__pb2.AddBoxerToCompetitionResponse.FromString,
                )
        self.RemoveBoxerToCompetition = channel.unary_unary(
                '/event.Event/RemoveBoxerToCompetition',
                request_serializer=event__pb2.RemoveBoxerToCompetitionRequest.SerializeToString,
                response_deserializer=event__pb2.RemoveBoxerToCompetitionResponse.FromString,
                )
        self.UpdateCompetition = channel.unary_unary(
                '/event.Event/UpdateCompetition',
                request_serializer=event__pb2.UpdateCompetitionRequest.SerializeToString,
                response_deserializer=event__pb2.UpdateCompetitionResponse.FromString,
                )
        self.DeleteCompetition = channel.unary_unary(
                '/event.Event/DeleteCompetition',
                request_serializer=event__pb2.DeleteCompetitionRequest.SerializeToString,
                response_deserializer=event__pb2.DeleteCompetitionResponse.FromString,
                )
        self.GetCompetitions = channel.unary_stream(
                '/event.Event/GetCompetitions',
                request_serializer=event__pb2.GetCompetitionsRequest.SerializeToString,
                response_deserializer=event__pb2.GetCompetitionsResponse.FromString,
                )
        self.GetCompetitionByName = channel.unary_unary(
                '/event.Event/GetCompetitionByName',
                request_serializer=event__pb2.GetCompetitionByIDRequest.SerializeToString,
                response_deserializer=event__pb2.GetCompetitionResponse.FromString,
                )
        self.GetCompetitionByID = channel.unary_unary(
                '/event.Event/GetCompetitionByID',
                request_serializer=event__pb2.GetCompetitionByIDRequest.SerializeToString,
                response_deserializer=event__pb2.GetCompetitionResponse.FromString,
                )
        self.CreateFight = channel.stream_unary(
                '/event.Event/CreateFight',
                request_serializer=event__pb2.CreateFightRequest.SerializeToString,
                response_deserializer=event__pb2.CreateFightResponse.FromString,
                )
        self.SetWinner = channel.unary_unary(
                '/event.Event/SetWinner',
                request_serializer=event__pb2.SetWinnerRequest.SerializeToString,
                response_deserializer=event__pb2.SetWinnerResponse.FromString,
                )
        self.GetFightsCompetition = channel.unary_stream(
                '/event.Event/GetFightsCompetition',
                request_serializer=event__pb2.GetFightsCompetitionRequest.SerializeToString,
                response_deserializer=event__pb2.GetFightResponse.FromString,
                )
        self.GetFightsBoxer = channel.unary_stream(
                '/event.Event/GetFightsBoxer',
                request_serializer=event__pb2.GetFightsBoxerRequest.SerializeToString,
                response_deserializer=event__pb2.GetFightResponse.FromString,
                )


class EventServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateClub(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddCoachToClub(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveCoachToClub(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateClub(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteClub(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetClubIDByName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetClubByName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetClubByID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetClubs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetClubCoachesID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCompetition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddBoxerToCompetition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveBoxerToCompetition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCompetition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCompetition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCompetitions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCompetitionByName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCompetitionByID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateFight(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetWinner(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFightsCompetition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFightsBoxer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EventServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateClub': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateClub,
                    request_deserializer=event__pb2.CreateClubRequest.FromString,
                    response_serializer=event__pb2.CreateClubResponse.SerializeToString,
            ),
            'AddCoachToClub': grpc.unary_unary_rpc_method_handler(
                    servicer.AddCoachToClub,
                    request_deserializer=event__pb2.AddCoachToClubRequest.FromString,
                    response_serializer=event__pb2.AddCoachToClubResponse.SerializeToString,
            ),
            'RemoveCoachToClub': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveCoachToClub,
                    request_deserializer=event__pb2.RemoveCoachToClubRequest.FromString,
                    response_serializer=event__pb2.RemoveCoachToClubResponse.SerializeToString,
            ),
            'UpdateClub': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateClub,
                    request_deserializer=event__pb2.UpdateClubRequest.FromString,
                    response_serializer=event__pb2.UpdateClubResponse.SerializeToString,
            ),
            'DeleteClub': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteClub,
                    request_deserializer=event__pb2.DeleteClubRequest.FromString,
                    response_serializer=event__pb2.DeleteClubResponse.SerializeToString,
            ),
            'GetClubIDByName': grpc.unary_unary_rpc_method_handler(
                    servicer.GetClubIDByName,
                    request_deserializer=event__pb2.GetClubIDByNameRequest.FromString,
                    response_serializer=event__pb2.GetClubIDByNameResponse.SerializeToString,
            ),
            'GetClubByName': grpc.unary_unary_rpc_method_handler(
                    servicer.GetClubByName,
                    request_deserializer=event__pb2.GetClubByNameRequest.FromString,
                    response_serializer=event__pb2.GetClubResponse.SerializeToString,
            ),
            'GetClubByID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetClubByID,
                    request_deserializer=event__pb2.GetClubByIDRequest.FromString,
                    response_serializer=event__pb2.GetClubResponse.SerializeToString,
            ),
            'GetClubs': grpc.unary_stream_rpc_method_handler(
                    servicer.GetClubs,
                    request_deserializer=event__pb2.GetClubsRequest.FromString,
                    response_serializer=event__pb2.GetClubsResponse.SerializeToString,
            ),
            'GetClubCoachesID': grpc.unary_stream_rpc_method_handler(
                    servicer.GetClubCoachesID,
                    request_deserializer=event__pb2.GetClubCoachesIDRequest.FromString,
                    response_serializer=event__pb2.GetClubCoachesIDResponse.SerializeToString,
            ),
            'CreateCompetition': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCompetition,
                    request_deserializer=event__pb2.CreateCompetitionRequest.FromString,
                    response_serializer=event__pb2.CreateCompetitionResponse.SerializeToString,
            ),
            'AddBoxerToCompetition': grpc.unary_unary_rpc_method_handler(
                    servicer.AddBoxerToCompetition,
                    request_deserializer=event__pb2.AddBoxerToCompetitionRequest.FromString,
                    response_serializer=event__pb2.AddBoxerToCompetitionResponse.SerializeToString,
            ),
            'RemoveBoxerToCompetition': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveBoxerToCompetition,
                    request_deserializer=event__pb2.RemoveBoxerToCompetitionRequest.FromString,
                    response_serializer=event__pb2.RemoveBoxerToCompetitionResponse.SerializeToString,
            ),
            'UpdateCompetition': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCompetition,
                    request_deserializer=event__pb2.UpdateCompetitionRequest.FromString,
                    response_serializer=event__pb2.UpdateCompetitionResponse.SerializeToString,
            ),
            'DeleteCompetition': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCompetition,
                    request_deserializer=event__pb2.DeleteCompetitionRequest.FromString,
                    response_serializer=event__pb2.DeleteCompetitionResponse.SerializeToString,
            ),
            'GetCompetitions': grpc.unary_stream_rpc_method_handler(
                    servicer.GetCompetitions,
                    request_deserializer=event__pb2.GetCompetitionsRequest.FromString,
                    response_serializer=event__pb2.GetCompetitionsResponse.SerializeToString,
            ),
            'GetCompetitionByName': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCompetitionByName,
                    request_deserializer=event__pb2.GetCompetitionByIDRequest.FromString,
                    response_serializer=event__pb2.GetCompetitionResponse.SerializeToString,
            ),
            'GetCompetitionByID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCompetitionByID,
                    request_deserializer=event__pb2.GetCompetitionByIDRequest.FromString,
                    response_serializer=event__pb2.GetCompetitionResponse.SerializeToString,
            ),
            'CreateFight': grpc.stream_unary_rpc_method_handler(
                    servicer.CreateFight,
                    request_deserializer=event__pb2.CreateFightRequest.FromString,
                    response_serializer=event__pb2.CreateFightResponse.SerializeToString,
            ),
            'SetWinner': grpc.unary_unary_rpc_method_handler(
                    servicer.SetWinner,
                    request_deserializer=event__pb2.SetWinnerRequest.FromString,
                    response_serializer=event__pb2.SetWinnerResponse.SerializeToString,
            ),
            'GetFightsCompetition': grpc.unary_stream_rpc_method_handler(
                    servicer.GetFightsCompetition,
                    request_deserializer=event__pb2.GetFightsCompetitionRequest.FromString,
                    response_serializer=event__pb2.GetFightResponse.SerializeToString,
            ),
            'GetFightsBoxer': grpc.unary_stream_rpc_method_handler(
                    servicer.GetFightsBoxer,
                    request_deserializer=event__pb2.GetFightsBoxerRequest.FromString,
                    response_serializer=event__pb2.GetFightResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'event.Event', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Event(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateClub(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event.Event/CreateClub',
            event__pb2.CreateClubRequest.SerializeToString,
            event__pb2.CreateClubResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddCoachToClub(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event.Event/AddCoachToClub',
            event__pb2.AddCoachToClubRequest.SerializeToString,
            event__pb2.AddCoachToClubResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveCoachToClub(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event.Event/RemoveCoachToClub',
            event__pb2.RemoveCoachToClubRequest.SerializeToString,
            event__pb2.RemoveCoachToClubResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateClub(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event.Event/UpdateClub',
            event__pb2.UpdateClubRequest.SerializeToString,
            event__pb2.UpdateClubResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteClub(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event.Event/DeleteClub',
            event__pb2.DeleteClubRequest.SerializeToString,
            event__pb2.DeleteClubResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetClubIDByName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event.Event/GetClubIDByName',
            event__pb2.GetClubIDByNameRequest.SerializeToString,
            event__pb2.GetClubIDByNameResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetClubByName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event.Event/GetClubByName',
            event__pb2.GetClubByNameRequest.SerializeToString,
            event__pb2.GetClubResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetClubByID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event.Event/GetClubByID',
            event__pb2.GetClubByIDRequest.SerializeToString,
            event__pb2.GetClubResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetClubs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/event.Event/GetClubs',
            event__pb2.GetClubsRequest.SerializeToString,
            event__pb2.GetClubsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetClubCoachesID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/event.Event/GetClubCoachesID',
            event__pb2.GetClubCoachesIDRequest.SerializeToString,
            event__pb2.GetClubCoachesIDResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateCompetition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event.Event/CreateCompetition',
            event__pb2.CreateCompetitionRequest.SerializeToString,
            event__pb2.CreateCompetitionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddBoxerToCompetition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event.Event/AddBoxerToCompetition',
            event__pb2.AddBoxerToCompetitionRequest.SerializeToString,
            event__pb2.AddBoxerToCompetitionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveBoxerToCompetition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event.Event/RemoveBoxerToCompetition',
            event__pb2.RemoveBoxerToCompetitionRequest.SerializeToString,
            event__pb2.RemoveBoxerToCompetitionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateCompetition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event.Event/UpdateCompetition',
            event__pb2.UpdateCompetitionRequest.SerializeToString,
            event__pb2.UpdateCompetitionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteCompetition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event.Event/DeleteCompetition',
            event__pb2.DeleteCompetitionRequest.SerializeToString,
            event__pb2.DeleteCompetitionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCompetitions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/event.Event/GetCompetitions',
            event__pb2.GetCompetitionsRequest.SerializeToString,
            event__pb2.GetCompetitionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCompetitionByName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event.Event/GetCompetitionByName',
            event__pb2.GetCompetitionByIDRequest.SerializeToString,
            event__pb2.GetCompetitionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCompetitionByID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event.Event/GetCompetitionByID',
            event__pb2.GetCompetitionByIDRequest.SerializeToString,
            event__pb2.GetCompetitionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateFight(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/event.Event/CreateFight',
            event__pb2.CreateFightRequest.SerializeToString,
            event__pb2.CreateFightResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetWinner(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event.Event/SetWinner',
            event__pb2.SetWinnerRequest.SerializeToString,
            event__pb2.SetWinnerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFightsCompetition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/event.Event/GetFightsCompetition',
            event__pb2.GetFightsCompetitionRequest.SerializeToString,
            event__pb2.GetFightResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFightsBoxer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/event.Event/GetFightsBoxer',
            event__pb2.GetFightsBoxerRequest.SerializeToString,
            event__pb2.GetFightResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
